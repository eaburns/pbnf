%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 10.0%%For: (University Relations) (University of New Hampshire)%%Title: (Logocomb_blue.eps)%%CreationDate: 6/5/03 10:53 AM%%BoundingBox: -131 417 723 520%%HiResBoundingBox: -130.4048 417.8828 722.0654 519.7617%%DocumentProcessColors:%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%DocumentCustomColors: (PANTONE 288 CVC)%%CMYKCustomColor: 1 0.65 0 0.3 (PANTONE 288 CVC)%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: -131 121 599 673%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 936 612%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -246 852 1 1146 827 18 0 1 7 42 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-131 121%%AI3_PaperRect:-31 583 761 -29%%AI3_Margin:31 -31 -31 29%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc1 1 1 1 k([Registration]) Pc([Registration]) Pc([Registration]) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0 0 0 1 k(C=0 M=0 Y=0 K=100) Pc1 0.65 0 0.3 (PANTONE 288 CVC) 0 x(PANTONE 288 CVC) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (Symbolism)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (Pathfinder Suite)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 Auu0 O1 0.65 0 0.3 (PANTONE 288 CVC) 0 x0 J 0 j 1 w 4 M []0 d0 XR-103.6548 466.6162 m-101.5461 467.8286 -101.5986 469.5156 v-101.1775 468.6719 l-100.4919 468.7246 l-79.8796 511.3203 l-70.6011 473.2583 l-69.8098 473.5752 -69.5996 472.9941 v-69.4414 471.2549 -68.9668 471.5713 v-103.6548 466.6162 lf-69.7576 477.0537 m-68.3342 479.9536 l-77.2808 507.5146 l-69.7576 477.0537 lf-67.6802 481.1816 m-77.2961 510.582 l-55.313 461.0811 l-52.677 457.6538 l-52.677 457.127 l-62.957 469.9902 l-62.8516 475.5776 l-61.9028 476.3164 -62.957 477.2651 v-66.1201 482.9585 l-65.1172 484.1489 -66.4629 484.5332 v-67.9456 484.2036 -66.8196 482.9131 v-67.6802 481.1816 lf-81.5134 510.582 m-81.8301 510.8989 l-81.8301 511.1089 -81.4607 511.1089 v-80.459 511.584 -77.876 511.7422 v-76.5051 510.6348 -76.4001 509.7388 v-76.8218 509.5806 l-77.6123 511.2671 -77.9287 511.2671 v-79.6682 511.6895 -81.5134 510.582 vf-80.3008 513.9561 m-79.4048 514.958 -79.3521 516.0649 v-79.9321 517.0664 -79.5103 517.3301 v-79.2466 517.7515 -79.2996 518.2266 v-79.1941 522.3384 -78.9304 518.1733 v-78.9304 517.8042 -78.7197 517.3301 v-78.6138 516.6973 -78.8247 516.1699 v-76.927 510.7935 l-77.876 511.7422 l-78.667 514.5356 l-78.9834 515.6436 -79.1941 514.7998 v-79.5103 513.165 l-80.3008 513.9561 lf-102.9741 465.4429 m-68.9548 470.2168 l-68.9548 469.9106 l-102.9214 465.189 l-102.9741 465.4429 lf-102.3708 464.3818 m-102.1633 451.4717 l-98.3586 451.8579 l-97.9001 456.5288 -95.0271 457.3491 v-91.4668 458.583 -89.4644 456.5308 v-87.8694 458.6387 -85.408 458.8931 v-82.4587 459.1152 -80.9695 457.6782 v-79.1921 459.9775 -76.5764 459.875 v-72.7874 459.793 -71.991 455.0977 v-69.2725 455.4551 l-69.1975 468.6953 l-102.3708 464.3818 lf-62.6804 457.5723 m-62.6282 465.916 l-54.1716 456.1958 l-54.1716 444.0054 l-55.7915 445.5703 l-55.7585 450.1904 -57.1096 451.4458 v-57.6702 452.082 -58.3445 451.6929 v-58.5984 453.3184 -59.6626 453.9443 v-60.1021 454.2188 -60.5413 453.6699 v-61.0889 457.041 -62.6804 457.5723 vf-54.1716 433.791 m-54.2813 424.1079 l-62.573 424.1079 l-62.6282 441.8638 l-55.8188 435.7954 L-55.8462 443.978 l-54.1716 442.0288 l-54.1716 433.791 lf-107.75 470.0229 m-109.5066 470.8433 -106.844 471.8086 v-102.864 472.6523 -101.2856 471.1035 v-100.5842 470.3164 -101.5198 469.9932 v-100.874 470.8691 -102.3962 471.1924 v-104.4194 471.8975 -106.9329 471.2817 v-108.3633 470.9585 -107.75 470.0229 vf-69.4019 475.4639 m-70.2473 476.7007 -68.0825 477.2573 v-64.6934 477.7124 -63.5796 477.0098 v-62.407 476.2842 -62.9338 475.6382 v-62.8108 476.6343 -65.0349 476.9277 v-67.7229 476.8784 -68.1926 476.7627 v-69.6753 476.4888 -69.4019 475.4639 vf-96.208 444.499 m-90.7439 445.0483 l-90.1213 445.4331 l-95.6863 444.8569 L-95.7688 452.4614 L-95.6016 453.1704 -94.2505 456.0977 -90.5906 454.6348 c-91.4111 456.6875 -94.5415 455.5083 v-96.3572 453.9229 -96.175 452.7524 V-96.2351 448.7275 L-96.208 444.499 Lf-66.1428 424.126 m-66.0813 475.8521 l-65.2 476.543 -64.6506 475.1157 V-64.7698 424.126 L-66.1428 424.126 Lf-104.4546 424.126 m-105.2871 470.3931 L-105.3967 470.8325 -106.3848 470.1733 v-106.4219 424.126 L-104.4546 424.126 Lf-51.2244 461.9087 m-54.5464 467.2905 l-54.5747 467.624 -54.3118 467.624 v-53.1233 468.3369 -54.5464 469.0752 v-55.313 468.8892 -54.9968 468.1509 v-54.3962 467.75 -54.8386 467.3076 v-54.7664 462.2656 l-52.4368 462.9634 -51.2244 461.9087 vf-105.3943 472.5791 m-102.8245 472.8267 -101.7173 471.9307 v-104.2878 477.2183 l-102.7056 478.5889 -104.1816 479.1694 v-105.2361 479.4326 -105.1311 478.5361 v-105.0781 477.6929 -104.7092 477.377 v-105.3943 472.5791 lf-55.3296 461.3936 m-53.7776 461.8813 -52.2126 461.4146 V-50.9495 461.1948 -51.4712 460.5088 V-50.2356 460.5635 -51.1692 461.5518 V-53.7786 462.5806 -55.3296 461.3936 vf-52.5684 424.0991 m-52.1304 460.5908 l-51.636 460.6465 -51.5264 460.2339 v-51.5386 424.0996 L-52.5684 424.0991 Lf-98.377 449.7983 m-102.1111 449.4141 l-102.3674 424.1079 l-69.126 424.1079 l-69.2471 453.3428 l-71.7439 453.0659 l-71.7439 445.0483 l-98.0657 442.7051 l-98.377 449.7983 lf-88.2209 445.2832 m-82.7571 445.832 l-82.1343 446.2168 l-87.6997 445.6406 L-87.7817 453.2456 L-87.6155 453.9541 -86.2644 456.8813 -82.604 455.4185 c-83.4243 457.4717 -86.5547 456.292 v-88.3706 454.7065 -88.188 453.5366 V-88.2485 449.5112 L-88.2209 445.2832 Lf-80.0115 446.1343 m-74.5479 446.6836 l-73.9253 447.0679 l-79.4895 446.4912 L-79.5723 454.0967 L-79.4053 454.8057 -78.0544 457.7324 -74.3943 456.2695 c-75.2148 458.3223 -78.3445 457.1436 v-80.1609 455.5576 -79.9785 454.3877 V-80.0388 450.3628 L-80.0115 446.1343 Lf-61.1729 443.1543 m-61.145 450.1279 L-61.0962 454.7012 -62.4912 454.7686 Y-62.4761 455.2402 l-60.9602 455.1748 -61.0081 450.7324 V-61.0081 442.6602 l-62.1611 443.7305 l-62.2163 444.252 l-61.1729 443.1543 Lf-58.8352 440.8311 m-58.8079 447.8057 L-58.759 452.3789 -60.1533 452.4458 Y-60.1387 452.918 l-58.623 452.8525 -58.6709 448.4097 V-58.6709 440.3374 l-59.824 441.4077 l-59.8789 441.9297 l-58.8352 440.8311 Lf-56.8035 438.8271 m-56.7761 445.8013 L-56.7273 450.374 -58.1216 450.4414 Y-58.1064 450.9126 l-56.5908 450.8477 -56.6387 446.4048 V-56.6387 438.333 l-57.7917 439.4038 l-57.8472 439.9253 l-56.8035 438.8271 Lf-130.4048 417.8828 m-108.1208 427 -80 427 v-51.8784 427 -30.1064 417.8828 y-52.0269 423.6611 -80 423.7261 v-104.104 423.7822 -130.4048 417.8828 yfU-77.6162 428.4189 mFUu*u6.6924 454.6611 m6.6924 461.4004 6.6924 462.6104 6.6064 463.9922 c6.5195 465.4619 6.1748 466.1523 4.749 466.4551 c4.4033 466.541 3.6689 466.585 3.2803 466.585 c3.1074 466.585 2.9346 466.6709 2.9346 466.8438 c2.9346 467.1035 3.1504 467.1895 3.626 467.1895 c5.5693 467.1895 8.2051 467.0596 8.5938 467.0596 c8.9824 467.0596 11.5742 467.1895 12.8701 467.1895 c13.3457 467.1895 13.5615 467.1035 13.5615 466.8438 c13.5615 466.6709 13.3887 466.585 13.2158 466.585 c12.9131 466.585 12.6543 466.541 12.1357 466.4551 c10.9697 466.2822 10.624 465.5049 10.5371 463.9922 c10.4512 462.6104 10.4512 461.4004 10.4512 454.6611 c10.4512 448.6133 L10.4512 442.3926 11.833 439.7148 13.6914 437.9434 c15.8076 435.9561 17.752 435.5674 20.2139 435.5674 c22.8496 435.5674 25.4414 436.8203 26.9961 438.6777 c28.9834 441.1396 29.502 444.8125 29.502 449.2617 c29.502 454.6611 L29.502 461.4004 29.502 462.6104 29.416 463.9922 c29.3291 465.4619 28.9834 466.1523 27.5576 466.4551 c27.2129 466.541 26.4785 466.585 26.0889 466.585 c25.917 466.585 25.7441 466.6709 25.7441 466.8438 c25.7441 467.1035 25.96 467.1895 26.4346 467.1895 c28.3789 467.1895 30.7549 467.0596 31.0137 467.0596 c31.3164 467.0596 33.3467 467.1895 34.6426 467.1895 c35.1182 467.1895 35.334 467.1035 35.334 466.8438 c35.334 466.6709 35.1611 466.585 34.9883 466.585 c34.6865 466.585 34.4268 466.585 33.9082 466.4551 c32.7422 466.2393 32.3965 465.5049 32.3096 463.9922 c32.2236 462.6104 32.2236 461.4004 32.2236 454.6611 c32.2236 450.0391 L32.2236 445.374 31.7051 440.1895 28.249 437.123 c25.1387 434.3574 21.8994 433.9258 19.3506 433.9258 c17.8818 433.9258 13.5186 434.0986 10.4512 436.9932 c8.334 439.0234 6.6924 442.0469 6.6924 448.3545 C6.6924 454.6611 lf*UU/BBAccumRotation (0.000000) XTu*u47.041 439.2568 m47.1104 436.4229 47.4561 435.5244 48.3887 435.248 c49.0449 435.0752 49.8057 435.04 50.1172 435.04 c50.29 435.04 50.3936 434.9717 50.3936 434.833 c50.3936 434.626 50.1855 434.5566 49.7715 434.5566 c47.8008 434.5566 46.4189 434.6602 46.1074 434.6602 c45.7969 434.6602 44.3447 434.5566 42.79 434.5566 c42.4443 434.5566 42.2373 434.5908 42.2373 434.833 c42.2373 434.9717 42.3408 435.04 42.5137 435.04 c42.79 435.04 43.4121 435.0752 43.9307 435.248 c44.7949 435.4893 44.9668 436.4922 44.9668 439.6367 c45.002 459.4395 L45.002 460.7881 45.1055 461.168 45.3818 461.168 c45.6582 461.168 46.2461 460.4072 46.5918 460.0615 c47.1104 459.4746 52.2598 453.9102 57.582 448.208 c61.0029 444.5439 64.7705 440.3281 65.876 439.1875 c65.4961 456.7441 L65.4619 458.9902 65.2197 459.751 64.1484 460.0273 c63.5264 460.166 62.7314 460.2002 62.4551 460.2002 c62.2129 460.2002 62.1787 460.3037 62.1787 460.4424 c62.1787 460.6494 62.4551 460.6836 62.8691 460.6836 c64.4248 460.6836 66.083 460.5801 66.4639 460.5801 c66.8438 460.5801 67.9844 460.6836 69.4014 460.6836 c69.7813 460.6836 70.0234 460.6494 70.0234 460.4424 c70.0234 460.3037 69.8848 460.2002 69.6436 460.2002 c69.4707 460.2002 69.2285 460.2002 68.8135 460.0967 c67.6729 459.8545 67.5352 459.0938 67.5352 457.0205 c67.4658 436.7686 L67.4658 434.4873 67.3965 434.3145 67.1553 434.3145 c66.8789 434.3145 66.4639 434.6943 64.6318 436.5264 c64.252 436.8721 59.2754 441.9521 55.6123 445.8926 c51.6025 450.2119 47.6973 454.5664 46.5918 455.8105 C47.041 439.2568 lf*U*u84.3652 444.5791 m84.3652 441.2607 84.3652 438.5313 84.5381 437.0791 c84.6416 436.0771 84.8496 435.3164 85.8857 435.1787 c86.3701 435.1094 87.1299 435.04 87.4414 435.04 c87.6484 435.04 87.7178 434.9365 87.7178 434.833 c87.7178 434.6602 87.5449 434.5566 87.165 434.5566 c85.2637 434.5566 83.0869 434.6602 82.9141 434.6602 c82.7412 434.6602 80.5635 434.5566 79.5273 434.5566 c79.1465 434.5566 78.9736 434.626 78.9736 434.833 c78.9736 434.9365 79.043 435.04 79.25 435.04 c79.5615 435.04 79.9766 435.1094 80.2871 435.1787 c80.9785 435.3164 81.1514 436.0771 81.2891 437.0791 c81.4619 438.5313 81.4619 441.2607 81.4619 444.5791 c81.4619 450.6611 L81.4619 456.0527 81.4619 457.0205 81.3936 458.127 c81.3242 459.3018 80.9785 459.8887 80.2178 460.0615 c79.8379 460.166 79.3887 460.2002 79.1465 460.2002 c79.0088 460.2002 78.8701 460.2695 78.8701 460.4072 c78.8701 460.6152 79.043 460.6836 79.4229 460.6836 c80.5635 460.6836 82.7412 460.5801 82.9141 460.5801 c83.0869 460.5801 85.2637 460.6836 86.3008 460.6836 c86.6807 460.6836 86.8535 460.6152 86.8535 460.4072 c86.8535 460.2695 86.7158 460.2002 86.5771 460.2002 c86.335 460.2002 86.1279 460.166 85.7129 460.0967 c84.7803 459.9238 84.5039 459.3359 84.4346 458.127 c84.3652 457.0205 84.3652 456.0527 84.3652 450.6611 C84.3652 444.5791 lf*U*u106.7939 438.7725 m108.7988 443.4043 113.4297 455.4658 114.1904 457.9541 c114.3633 458.4717 114.501 458.9561 114.501 459.2666 c114.501 459.5439 114.3975 459.8887 114.0518 460.0615 c113.6377 460.2002 113.1191 460.2002 112.7383 460.2002 c112.5313 460.2002 112.3584 460.2344 112.3584 460.4072 c112.3584 460.6152 112.5664 460.6836 113.1191 460.6836 c114.501 460.6836 116.0908 460.5801 116.5059 460.5801 c116.7129 460.5801 118.1992 460.6836 119.2012 460.6836 c119.582 460.6836 119.7891 460.6152 119.7891 460.4424 c119.7891 460.2695 119.6504 460.2002 119.374 460.2002 c119.1328 460.2002 118.3721 460.2002 117.7158 459.7852 c117.2666 459.4746 116.748 458.8867 115.8145 456.5371 c115.4346 455.5693 113.7061 451.4219 111.9443 447.1709 c109.8359 442.125 108.2803 438.3926 107.4854 436.6992 c106.5176 434.626 106.3799 434.0723 106.0342 434.0723 c105.6191 434.0723 105.4463 434.5566 104.79 436.2158 c96.3223 457.4004 L95.5625 459.3359 95.0439 459.7168 93.834 460.0615 c93.3154 460.2002 92.7285 460.2002 92.5215 460.2002 c92.3135 460.2002 92.2441 460.3037 92.2441 460.4424 c92.2441 460.6494 92.5898 460.6836 93.1436 460.6836 c94.8018 460.6836 96.7715 460.5801 97.1865 460.5801 c97.5322 460.5801 99.0879 460.6836 100.4004 460.6836 c101.0225 460.6836 101.334 460.6152 101.334 460.4424 c101.334 460.2695 101.2305 460.2002 100.9883 460.2002 c100.6084 460.2002 99.9863 460.166 99.6748 460.0273 c99.2949 459.8545 99.2256 459.5781 99.2256 459.3359 c99.2256 458.8867 99.6406 457.8154 100.1592 456.4678 C106.7939 438.7725 lf*U*u127.5645 450.6611 m127.5645 456.0527 127.5645 457.0205 127.4951 458.127 c127.4268 459.3018 127.1494 459.8545 126.0098 460.0967 c125.7324 460.166 125.1455 460.2002 124.834 460.2002 c124.6963 460.2002 124.5576 460.2695 124.5576 460.4072 c124.5576 460.6152 124.7305 460.6836 125.1104 460.6836 c126.666 460.6836 128.8428 460.5801 129.0156 460.5801 c129.2578 460.5801 136.1357 460.5801 136.9307 460.6152 c137.5869 460.6494 138.1396 460.7188 138.416 460.7881 c138.5889 460.8223 138.7275 460.9609 138.9004 460.9609 c139.0039 460.9609 139.0381 460.8223 139.0381 460.6494 c139.0381 460.4072 138.8662 459.9932 138.7617 459.0254 c138.7275 458.6797 138.6582 457.1592 138.5889 456.7441 c138.5547 456.5713 138.4854 456.3643 138.3477 456.3643 c138.1396 456.3643 138.0713 456.5371 138.0713 456.8135 c138.0713 457.0547 138.0361 457.6426 137.8633 458.0576 c137.6211 458.6104 137.2764 459.0254 135.4102 459.2324 c134.8223 459.3018 131.0547 459.3359 130.6748 459.3359 c130.5371 459.3359 130.4678 459.2324 130.4678 458.9902 c130.4678 449.4521 L130.4678 449.21 130.502 449.1064 130.6748 449.1064 c131.124 449.1064 135.375 449.1064 136.1699 449.1758 c136.999 449.2441 137.4834 449.3135 137.7939 449.6592 c138.0361 449.9355 138.1748 450.1084 138.3125 450.1084 c138.416 450.1084 138.4854 450.0391 138.4854 449.832 c138.4854 449.625 138.3125 449.0371 138.209 447.8965 c138.1396 447.2051 138.0713 445.9268 138.0713 445.6846 c138.0713 445.4082 138.0713 445.0283 137.8291 445.0283 c137.6563 445.0283 137.5869 445.166 137.5869 445.3389 c137.5869 445.6846 137.5869 446.0303 137.4492 446.4795 c137.3105 446.9639 136.999 447.5508 135.6514 447.6895 c134.7188 447.793 131.2969 447.8623 130.71 447.8623 c130.5371 447.8623 130.4678 447.7588 130.4678 447.6201 c130.4678 444.5791 L130.4678 443.4043 130.4326 439.3945 130.4678 438.6689 c130.5713 436.2842 131.0898 435.835 134.4766 435.835 c135.375 435.835 136.8955 435.835 137.7939 436.2158 c138.6934 436.5957 139.1074 437.2871 139.3496 438.7041 c139.4189 439.084 139.4883 439.2217 139.6602 439.2217 c139.8682 439.2217 139.8682 438.9453 139.8682 438.7041 c139.8682 438.4277 139.5918 436.0771 139.4189 435.3516 c139.1768 434.4531 138.9004 434.4531 137.5527 434.4531 c132.334 434.4531 130.0186 434.6602 129.0156 434.6602 c128.8428 434.6602 126.666 434.5566 125.6289 434.5566 c125.249 434.5566 125.0762 434.626 125.0762 434.833 c125.0762 434.9365 125.1455 435.04 125.3525 435.04 c125.6641 435.04 126.0781 435.1094 126.3896 435.1787 c127.0811 435.3164 127.2539 436.0771 127.3916 437.0791 c127.5645 438.5313 127.5645 441.2607 127.5645 444.5791 C127.5645 450.6611 lf*U*u154.0371 458.9561 m154.0371 459.1631 154.1406 459.3018 154.3135 459.3711 c154.6592 459.4746 155.5918 459.5781 156.6289 459.5781 c160.3271 459.5781 162.6084 456.9863 162.6084 452.666 c162.6084 450.0391 161.709 448.1729 160.5 447.3438 c159.7051 446.791 158.7373 446.6875 157.9082 446.6875 c156.3867 446.6875 154.7969 446.9287 154.2793 447.2402 c154.1064 447.3438 154.0371 447.4824 154.0371 447.6553 c154.0371 458.9561 Lf1 D151.2725 444.5791 m151.2725 441.2607 151.2725 438.5313 151.0996 437.0791 c150.9609 436.0771 150.7881 435.3164 150.0967 435.1787 c149.7861 435.1094 149.3711 435.04 149.0605 435.04 c148.8525 435.04 148.7842 434.9365 148.7842 434.833 c148.7842 434.626 148.957 434.5566 149.3369 434.5566 c150.374 434.5566 152.5508 434.6602 152.585 434.6602 c152.7578 434.6602 154.9355 434.5566 156.8359 434.5566 c157.2168 434.5566 157.3896 434.6602 157.3896 434.833 c157.3896 434.9365 157.3203 435.04 157.1133 435.04 c156.8018 435.04 156.042 435.1094 155.5576 435.1787 c154.5205 435.3164 154.3135 436.0771 154.21 437.0791 c154.0371 438.5313 154.0371 441.2607 154.0371 444.5791 C154.0371 445.4082 l154.0371 445.5811 154.1064 445.6846 154.2793 445.6846 C158.5303 445.6162 l158.7373 445.6162 158.8408 445.5469 158.9795 445.4082 c159.6699 444.5098 161.2949 442.1943 162.7461 440.2939 c164.7158 437.7012 165.9258 436.0078 167.4121 435.2129 c168.3105 434.7295 169.1748 434.5566 171.1094 434.5566 C173.5635 434.5566 l174.1855 434.5566 174.3926 434.626 174.3926 434.833 c174.3926 434.9365 174.2549 435.04 174.082 435.04 c173.875 435.04 173.3906 435.04 172.7344 435.1436 c171.8701 435.2822 170.3838 435.6621 168.5176 437.6328 c166.5137 439.7754 164.1631 442.8506 161.3291 446.4795 c164.4395 449.3486 165.5107 451.9053 165.5107 454.4629 c165.5107 456.8477 163.9902 458.541 163.126 459.1631 c161.2949 460.4766 158.9795 460.6836 156.8018 460.6836 c155.7305 460.6836 153.1035 460.5801 152.7236 460.5801 c152.5508 460.5801 150.374 460.6836 148.8184 460.6836 c148.4385 460.6836 148.2656 460.6152 148.2656 460.4072 c148.2656 460.2695 148.4033 460.2002 148.542 460.2002 c148.8525 460.2002 149.4404 460.166 149.7168 460.0967 c150.8574 459.8545 151.1338 459.3018 151.2031 458.127 c151.2725 457.0205 151.2725 456.0527 151.2725 450.6611 c151.2725 444.5791 Lf*UU/BBAccumRotation (0.000000) XTu*u0 D177.3838 435.0059 m176.9004 435.248 176.8662 435.3857 176.8662 436.3193 c176.8662 438.0469 177.0039 439.4297 177.0381 439.9824 c177.0732 440.3623 177.1426 440.5352 177.3154 440.5352 c177.5225 440.5352 177.5566 440.4316 177.5566 440.1553 c177.5566 439.8438 177.5566 439.3604 177.6611 438.877 c178.1787 436.3193 180.46 435.3516 182.7754 435.3516 c186.0938 435.3516 187.7178 437.7363 187.7178 439.9482 c187.7178 442.333 186.7158 443.7148 183.7432 446.1689 c182.1885 447.4473 L178.5244 450.4541 177.6953 452.5967 177.6953 454.9473 c177.6953 458.6445 180.46 461.168 184.8496 461.168 c186.1973 461.168 187.1992 461.0293 188.0635 460.8223 c188.7197 460.6836 188.9961 460.6494 189.2725 460.6494 c189.5498 460.6494 189.6182 460.5801 189.6182 460.4072 c189.6182 460.2344 189.4805 459.0938 189.4805 456.7441 c189.4805 456.1914 189.4111 455.9492 189.2383 455.9492 c189.0313 455.9492 188.9961 456.1221 188.9619 456.3984 c188.9277 456.8135 188.7197 457.7461 188.5127 458.127 c188.3057 458.5068 187.3721 459.958 184.1924 459.958 c181.8076 459.958 179.9414 458.4717 179.9414 455.9492 c179.9414 453.9795 180.9092 452.8047 184.1582 450.1436 c185.126 449.3828 L189.2041 446.1689 190.1719 444.0264 190.1719 441.2607 c190.1719 439.8438 189.6182 437.2178 187.2334 435.5244 c185.748 434.4873 183.8818 434.0723 182.0156 434.0723 c180.3906 434.0723 178.8008 434.3145 177.3838 435.0059 cf*U*u204.8242 444.5791 m204.8242 441.2607 204.8242 438.5313 204.9971 437.0791 c205.1006 436.0771 205.3086 435.3164 206.3447 435.1787 c206.8291 435.1094 207.5898 435.04 207.9004 435.04 c208.1074 435.04 208.1768 434.9365 208.1768 434.833 c208.1768 434.6602 208.0039 434.5566 207.624 434.5566 c205.7227 434.5566 203.5459 434.6602 203.373 434.6602 c203.2002 434.6602 201.0225 434.5566 199.9863 434.5566 c199.6064 434.5566 199.4336 434.626 199.4336 434.833 c199.4336 434.9365 199.502 435.04 199.71 435.04 c200.0205 435.04 200.4355 435.1094 200.7461 435.1787 c201.4375 435.3164 201.6104 436.0771 201.749 437.0791 c201.9219 438.5313 201.9219 441.2607 201.9219 444.5791 c201.9219 450.6611 L201.9219 456.0527 201.9219 457.0205 201.8525 458.127 c201.7832 459.3018 201.4375 459.8887 200.6777 460.0615 c200.2969 460.166 199.8477 460.2002 199.6064 460.2002 c199.4678 460.2002 199.3291 460.2695 199.3291 460.4072 c199.3291 460.6152 199.502 460.6836 199.8828 460.6836 c201.0225 460.6836 203.2002 460.5801 203.373 460.5801 c203.5459 460.5801 205.7227 460.6836 206.7598 460.6836 c207.1396 460.6836 207.3125 460.6152 207.3125 460.4072 c207.3125 460.2695 207.1748 460.2002 207.0361 460.2002 c206.7949 460.2002 206.5869 460.166 206.1729 460.0967 c205.2393 459.9238 204.9629 459.3359 204.8936 458.127 c204.8242 457.0205 204.8242 456.0527 204.8242 450.6611 C204.8242 444.5791 lf*U*u227.1152 444.5791 m227.1152 441.2607 227.1152 438.5313 227.2881 437.0791 c227.3916 436.0771 227.5996 435.3164 228.6357 435.1787 c229.1201 435.1094 229.8799 435.04 230.1914 435.04 c230.3984 435.04 230.4678 434.9365 230.4678 434.833 c230.4678 434.6602 230.2949 434.5566 229.915 434.5566 c228.0137 434.5566 225.8369 434.6602 225.6641 434.6602 c225.4912 434.6602 223.3135 434.5566 222.2773 434.5566 c221.8965 434.5566 221.7236 434.626 221.7236 434.833 c221.7236 434.9365 221.793 435.04 222 435.04 c222.3115 435.04 222.7266 435.1094 223.0371 435.1787 c223.7285 435.3164 223.9014 436.0771 224.0391 437.0791 c224.2119 438.5313 224.2119 441.2607 224.2119 444.5791 c224.2119 459.1982 L219.0977 459.1289 L216.9551 459.0938 216.125 458.8525 215.5723 458.0225 c215.1924 457.4355 215.0889 457.1934 214.9844 456.9512 c214.8809 456.6748 214.7773 456.6055 214.6387 456.6055 c214.5352 456.6055 214.4658 456.71 214.4658 456.917 c214.4658 457.2627 215.1572 460.2344 215.2266 460.5107 c215.2959 460.7188 215.4336 461.168 215.5723 461.168 c215.8145 461.168 216.1602 460.8223 217.0928 460.7529 c218.0947 460.6494 219.4082 460.5801 219.8232 460.5801 c232.7832 460.5801 L234.9951 460.5801 235.9277 460.9258 236.2051 460.9258 c236.3779 460.9258 236.3779 460.7188 236.3779 460.5107 c236.3779 459.4746 236.2734 457.0898 236.2734 456.71 c236.2734 456.3984 236.1699 456.2607 236.0322 456.2607 c235.8594 456.2607 235.79 456.3643 235.7559 456.8477 c235.7207 457.2275 L235.583 458.2646 234.7881 459.0596 231.4697 459.1289 c227.1152 459.1982 L227.1152 444.5791 lf*UU/BBAccumRotation (0.000000) XTu*u251.04 443.5078 m251.04 445.374 250.6943 446.1338 250.2451 447.1367 c250.0029 447.6895 245.3721 455.293 244.1621 457.0898 c243.2979 458.3682 242.4346 459.2324 241.8125 459.6475 c241.2939 459.9932 240.6367 460.2002 240.3262 460.2002 c240.1533 460.2002 239.9805 460.2695 239.9805 460.4424 c239.9805 460.5801 240.1182 460.6836 240.4297 460.6836 c241.0859 460.6836 243.6787 460.5801 243.8516 460.5801 c244.0928 460.5801 245.4063 460.6836 246.7539 460.6836 c247.1348 460.6836 247.2031 460.5801 247.2031 460.4424 c247.2031 460.3037 246.9961 460.2695 246.6846 460.1309 c246.4082 459.9932 246.2354 459.7852 246.2354 459.5088 c246.2354 459.0938 246.4082 458.6797 246.6846 458.1611 c247.2383 457.1592 252.4219 448.2422 253.0439 447.2402 c253.7012 448.6914 258.0898 456.2607 258.7813 457.4004 c259.2305 458.127 259.3682 458.7139 259.3682 459.1631 c259.3682 459.6475 259.2305 460.0273 258.8154 460.1309 c258.5049 460.2344 258.2969 460.3037 258.2969 460.4766 c258.2969 460.6152 258.5049 460.6836 258.8506 460.6836 c259.749 460.6836 260.8545 460.5801 261.1309 460.5801 c261.3389 460.5801 263.8271 460.6836 264.4834 460.6836 c264.7256 460.6836 264.9326 460.6152 264.9326 460.4766 c264.9326 460.3037 264.7598 460.2002 264.4834 460.2002 c264.1035 460.2002 263.4463 460.0615 262.8936 459.7168 c262.2021 459.3018 261.8223 458.8867 261.0625 457.9541 c259.9219 456.5713 255.083 448.4492 254.4609 446.9639 c253.9424 445.7197 253.9424 444.6484 253.9424 443.5078 c253.9424 440.5352 L253.9424 439.9824 253.9424 438.5313 254.0459 437.0791 c254.1152 436.0771 254.4268 435.3164 255.4629 435.1787 c255.9473 435.1094 256.708 435.04 257.0186 435.04 c257.2256 435.04 257.2949 434.9365 257.2949 434.833 c257.2949 434.6602 257.1221 434.5566 256.7422 434.5566 c254.8408 434.5566 252.6641 434.6602 252.4912 434.6602 c252.3184 434.6602 250.1406 434.5566 249.1045 434.5566 c248.7236 434.5566 248.5518 434.626 248.5518 434.833 c248.5518 434.9365 248.6201 435.04 248.8281 435.04 c249.1387 435.04 249.5537 435.1094 249.8643 435.1787 c250.5557 435.3164 250.8672 436.0771 250.9355 437.0791 c251.04 438.5313 251.04 439.9824 251.04 440.5352 C251.04 443.5078 lf*UU/BBAccumRotation (0.000000) XT*u288.3564 441.2266 m288.3564 445.1143 289.2627 452.3291 294.6631 452.3291 c296.3477 452.3291 299.1563 451.292 299.1563 446.54 c299.1563 444.0342 298.0762 435.6533 292.7188 435.6533 c289.7383 435.6533 288.3564 438.2461 288.3564 441.2266 cf1 D285.418 440.8809 m285.418 436.0859 287.9238 434.1416 291.1641 434.1416 c293.4531 434.1416 296.5635 435.3945 298.4648 437.3818 c300.3223 439.3262 302.0938 442.3926 302.0938 446.7559 c302.0938 450.3848 300.9707 453.8408 296.3477 453.8408 c294.4043 453.8408 292.2012 453.3223 289.6084 451.292 c287.3193 449.5205 285.418 446.3672 285.418 440.8809 cf*U*u0 D303.3896 427.4463 m303.7793 427.4463 L303.9521 427.0566 304.5996 426.4092 305.5928 426.4092 c306.5 426.4092 307.667 427.3594 308.1855 430.9014 c308.7471 434.876 310 444.7256 310.6045 450.126 c309.5674 450.126 308.3584 450.126 307.3643 449.9961 c307.4941 450.7734 L308.876 451.249 309.6543 451.5947 310.7773 452.1992 c311.4688 456.9512 L312.0303 460.71 312.8076 462.2217 314.6221 464.0361 c317.9053 467.3193 318.5098 467.5781 319.5898 467.5781 c320.2813 467.5781 320.7998 467.3623 321.2314 467.1465 c320.2813 463.4307 L319.8486 463.4307 L319.2871 464.1221 318.7695 464.4678 317.9053 464.4678 c316.3936 464.4678 315.5293 463.5176 314.4063 456.6484 c313.6279 451.9404 L315.3994 451.9404 L316.8252 451.9404 318.2939 452.1992 318.5967 452.2852 c318.8555 452.1563 L318.3369 450.126 L313.4121 450.126 L311.4248 437.9434 310.6904 429.6055 307.2344 425.9766 c305.7656 424.4219 304.2109 424.2061 302.7852 424.2061 C303.3896 427.4463 lf*Uu*u346.543 440.4053 m346.6299 436.8633 347.0615 435.7402 348.2285 435.3945 c349.0488 435.1787 349.999 435.1357 350.3877 435.1357 c350.6045 435.1357 350.7334 435.0488 350.7334 434.876 c350.7334 434.6172 350.4746 434.5303 349.9561 434.5303 c347.4941 434.5303 345.7656 434.6602 345.377 434.6602 c344.9883 434.6602 343.1738 434.5303 341.2295 434.5303 c340.7979 434.5303 340.5391 434.5742 340.5391 434.876 c340.5391 435.0488 340.668 435.1357 340.8838 435.1357 c341.2295 435.1357 342.0078 435.1787 342.6553 435.3945 c343.7354 435.6973 343.9512 436.9502 343.9512 440.8809 c343.9951 465.6338 L343.9951 467.3193 344.124 467.7939 344.4697 467.7939 c344.8154 467.7939 345.5498 466.8438 345.9814 466.4121 c346.6299 465.6777 353.0664 458.7227 359.7197 451.5947 c363.9961 447.0156 368.7051 441.7451 370.0869 440.3193 c369.6123 462.2646 L369.5684 465.0723 369.2666 466.0234 367.9268 466.3682 c367.1494 466.541 366.1563 466.585 365.8105 466.585 c365.5078 466.585 365.4648 466.7139 365.4648 466.8867 c365.4648 467.1465 365.8105 467.1895 366.3281 467.1895 c368.2725 467.1895 370.3457 467.0596 370.8213 467.0596 c371.2969 467.0596 372.7217 467.1895 374.4932 467.1895 c374.9688 467.1895 375.2715 467.1465 375.2715 466.8867 c375.2715 466.7139 375.0986 466.585 374.7959 466.585 c374.5801 466.585 374.2773 466.585 373.7588 466.4551 c372.334 466.1523 372.1611 465.2021 372.1611 462.6104 c372.0742 437.2949 L372.0742 434.4443 371.9883 434.2285 371.6855 434.2285 c371.3398 434.2285 370.8213 434.7031 368.5322 436.9932 c368.0566 437.4248 361.8359 443.7754 357.2568 448.7002 c352.2461 454.0996 347.3643 459.543 345.9814 461.0986 C346.543 440.4053 lf*UU/BBAccumRotation (0.000000) XTu*u387.3887 450.6611 m387.3887 456.0527 387.3887 457.0205 387.3203 458.127 c387.251 459.3018 386.9746 459.8545 385.834 460.0967 c385.5576 460.166 384.9697 460.2002 384.6592 460.2002 c384.5205 460.2002 384.3818 460.2695 384.3818 460.4072 c384.3818 460.6152 384.5547 460.6836 384.9355 460.6836 c386.4902 460.6836 388.668 460.5801 388.8408 460.5801 c389.082 460.5801 395.96 460.5801 396.7549 460.6152 c397.4111 460.6494 397.9648 460.7188 398.2412 460.7881 c398.4141 460.8223 398.5518 460.9609 398.7246 460.9609 c398.8281 460.9609 398.8633 460.8223 398.8633 460.6494 c398.8633 460.4072 398.6904 459.9932 398.5869 459.0254 c398.5518 458.6797 398.4824 457.1592 398.4141 456.7441 c398.3789 456.5713 398.3096 456.3643 398.1719 456.3643 c397.9648 456.3643 397.8955 456.5371 397.8955 456.8135 c397.8955 457.0547 397.8604 457.6426 397.6875 458.0576 c397.4463 458.6104 397.1006 459.0254 395.2344 459.2324 c394.6465 459.3018 390.8799 459.3359 390.499 459.3359 c390.3613 459.3359 390.292 459.2324 390.292 458.9902 c390.292 449.4521 L390.292 449.21 390.3262 449.1064 390.499 449.1064 c390.9482 449.1064 395.1992 449.1064 395.9941 449.1758 c396.8242 449.2441 397.3076 449.3135 397.6191 449.6592 c397.8604 449.9355 397.999 450.1084 398.1377 450.1084 c398.2412 450.1084 398.3096 450.0391 398.3096 449.832 c398.3096 449.625 398.1377 449.0371 398.0332 447.8965 c397.9648 447.2051 397.8955 445.9268 397.8955 445.6846 c397.8955 445.4082 397.8955 445.0283 397.6533 445.0283 c397.4805 445.0283 397.4111 445.166 397.4111 445.3389 c397.4111 445.6846 397.4111 446.0303 397.2734 446.4795 c397.1348 446.9639 396.8242 447.5508 395.4766 447.6895 c394.543 447.793 391.1211 447.8623 390.5342 447.8623 c390.3613 447.8623 390.292 447.7588 390.292 447.6201 c390.292 444.5791 L390.292 443.4043 390.2578 439.3945 390.292 438.6689 c390.3955 436.2842 390.9141 435.835 394.3008 435.835 c395.1992 435.835 396.7207 435.835 397.6191 436.2158 c398.5176 436.5957 398.9326 437.2871 399.1738 438.7041 c399.2432 439.084 399.3125 439.2217 399.4854 439.2217 c399.6924 439.2217 399.6924 438.9453 399.6924 438.7041 c399.6924 438.4277 399.416 436.0771 399.2432 435.3516 c399.001 434.4531 398.7246 434.4531 397.377 434.4531 c392.1582 434.4531 389.8428 434.6602 388.8408 434.6602 c388.668 434.6602 386.4902 434.5566 385.4541 434.5566 c385.0732 434.5566 384.9004 434.626 384.9004 434.833 c384.9004 434.9365 384.9697 435.04 385.1768 435.04 c385.4883 435.04 385.9033 435.1094 386.2139 435.1787 c386.9053 435.3164 387.0781 436.0771 387.2158 437.0791 c387.3887 438.5313 387.3887 441.2607 387.3887 444.5791 C387.3887 450.6611 lf*UU/BBAccumRotation (0.000000) XTu*u433.4395 439.3262 m433.5771 439.3262 L434.5107 442.5049 437.6904 452.5273 438.8994 456.9512 c439.2451 458.2305 439.2803 458.7139 439.2803 459.1631 c439.2803 459.7852 438.8994 460.2002 437.3105 460.2002 c437.1377 460.2002 436.999 460.3037 436.999 460.4424 c436.999 460.6152 437.1719 460.6836 437.5859 460.6836 c439.3486 460.6836 440.8008 460.5801 441.1113 460.5801 c441.3535 460.5801 442.8398 460.6836 443.9111 460.6836 c444.2217 460.6836 444.3945 460.6152 444.3945 460.4766 c444.3945 460.3037 444.291 460.2002 444.084 460.2002 c443.9453 460.2002 443.2891 460.166 442.9092 460.0273 c441.8721 459.6475 441.3193 458.1953 440.6621 456.2949 c439.1416 451.9053 435.6514 440.916 434.3037 437.0449 c433.4053 434.4873 433.2324 434.0723 432.8516 434.0723 c432.5059 434.0723 432.2988 434.5215 431.8154 435.8701 c425.041 455.085 L424.9717 455.085 L423.7275 451.7676 418.9932 439.1182 417.749 435.9043 c417.1963 434.4531 417.0234 434.0723 416.6084 434.0723 c416.2627 434.0723 416.0898 434.4531 415.3994 436.8027 c409.2471 457.2969 L408.6943 459.1289 408.2451 459.6475 407.3467 459.9932 c406.8975 460.166 406.0332 460.2002 405.791 460.2002 c405.6182 460.2002 405.4805 460.2344 405.4805 460.4424 c405.4805 460.6152 405.6875 460.6836 406.0332 460.6836 c407.8301 460.6836 409.7314 460.5801 410.1113 460.5801 c410.4219 460.5801 411.9434 460.6836 413.6709 460.6836 c414.1553 460.6836 414.293 460.5801 414.293 460.4424 c414.293 460.2344 414.1201 460.2002 413.9473 460.2002 c413.6709 460.2002 413.0146 460.2002 412.5996 459.9932 c412.3926 459.8887 412.1504 459.6123 412.1504 459.1631 c412.1504 458.7139 412.4609 457.5049 412.8066 455.9834 c413.3252 453.7715 416.9199 441.0879 417.4385 439.2568 c417.5068 439.2568 L424.834 458.9561 L425.3525 460.373 425.4902 460.5459 425.6982 460.5459 c425.9395 460.5459 426.1475 460.0967 426.5615 458.9219 C433.4395 439.3262 lf*UU/BBAccumRotation (0.000000) XTu*u496.9648 447.0586 m496.9648 442.9111 496.9648 439.498 497.1807 437.6846 c497.3105 436.4316 497.5693 435.4805 498.8652 435.3086 c499.4697 435.2217 500.4209 435.1357 500.8096 435.1357 c501.0684 435.1357 501.1553 435.0059 501.1553 434.876 c501.1553 434.6602 500.9395 434.5303 500.4639 434.5303 c498.0879 434.5303 495.3662 434.6602 495.1504 434.6602 c494.9336 434.6602 492.2129 434.5303 490.917 434.5303 c490.4414 434.5303 490.2256 434.6172 490.2256 434.876 c490.2256 435.0059 490.3115 435.1357 490.5713 435.1357 c490.96 435.1357 491.4785 435.2217 491.8672 435.3086 c492.7314 435.4805 492.9473 436.4316 493.1201 437.6846 c493.3359 439.498 493.3359 442.9111 493.3359 447.0586 c493.3359 451.5947 L493.3359 451.7676 493.2061 451.8535 493.0771 451.8535 c474.7598 451.8535 L474.6309 451.8535 474.501 451.8105 474.501 451.5947 c474.501 447.0586 L474.501 442.9111 474.501 439.498 474.7168 437.6846 c474.8467 436.4316 475.1055 435.4805 476.4014 435.3086 c477.0068 435.2217 477.957 435.1357 478.3457 435.1357 c478.6045 435.1357 478.6914 435.0059 478.6914 434.876 c478.6914 434.6602 478.4756 434.5303 478 434.5303 c475.624 434.5303 472.9023 434.6602 472.6865 434.6602 c472.4707 434.6602 469.749 434.5303 468.4531 434.5303 c467.9775 434.5303 467.7617 434.6172 467.7617 434.876 c467.7617 435.0059 467.8486 435.1357 468.1074 435.1357 c468.4961 435.1357 469.0146 435.2217 469.4033 435.3086 c470.2676 435.4805 470.4834 436.4316 470.6563 437.6846 c470.8721 439.498 470.8721 442.9111 470.8721 447.0586 c470.8721 454.6611 L470.8721 461.4004 470.8721 462.6104 470.7861 463.9922 c470.6992 465.4619 470.3535 466.1523 468.9277 466.4551 c468.583 466.541 467.8486 466.585 467.459 466.585 c467.2861 466.585 467.1143 466.6709 467.1143 466.8438 c467.1143 467.1035 467.3301 467.1895 467.8047 467.1895 c469.749 467.1895 472.4707 467.0596 472.6865 467.0596 c472.9023 467.0596 475.624 467.1895 476.9199 467.1895 c477.3955 467.1895 477.6113 467.1035 477.6113 466.8438 c477.6113 466.6709 477.4385 466.585 477.2656 466.585 c476.9629 466.585 476.7041 466.541 476.1855 466.4551 c475.0195 466.2393 474.6738 465.5049 474.5869 463.9922 c474.501 462.6104 474.501 461.4004 474.501 454.6611 c474.501 453.7539 L474.501 453.5381 474.6309 453.4951 474.7598 453.4951 c493.0771 453.4951 L493.2061 453.4951 493.3359 453.5381 493.3359 453.7539 c493.3359 454.6611 L493.3359 461.4004 493.3359 462.6104 493.249 463.9922 c493.1631 465.4619 492.8174 466.1523 491.3916 466.4551 c491.0459 466.541 490.3115 466.585 489.9229 466.585 c489.75 466.585 489.5771 466.6709 489.5771 466.8438 c489.5771 467.1035 489.7939 467.1895 490.2686 467.1895 c492.2129 467.1895 494.9336 467.0596 495.1504 467.0596 c495.3662 467.0596 498.0879 467.1895 499.3838 467.1895 c499.8594 467.1895 500.0752 467.1035 500.0752 466.8438 c500.0752 466.6709 499.9023 466.585 499.7295 466.585 c499.4268 466.585 499.168 466.541 498.6494 466.4551 c497.4834 466.2393 497.1377 465.5049 497.0508 463.9922 c496.9648 462.6104 496.9648 461.4004 496.9648 454.6611 C496.9648 447.0586 lf*UU/BBAccumRotation (0.000000) XTu*u515.5039 445.9961 m515.3994 445.9961 515.3311 446.0654 515.3994 446.2383 C518.4414 455.5693 l518.6143 456.0879 518.7871 456.0879 518.96 455.5693 C522.2432 446.2383 l522.2773 446.0996 522.2773 445.9961 522.1045 445.9961 c515.5039 445.9961 Lf1 D510.665 438.3584 m510.043 436.6299 509.3516 435.3164 507.7617 435.1094 c507.4854 435.0752 507.002 435.04 506.7598 435.04 c506.5869 435.04 506.4482 434.9717 506.4482 434.833 c506.4482 434.626 506.6563 434.5566 507.1055 434.5566 c508.7295 434.5566 510.6309 434.6602 511.0107 434.6602 c511.3906 434.6602 512.877 434.5566 513.7061 434.5566 c514.0176 434.5566 514.2246 434.626 514.2246 434.833 c514.2246 434.9717 514.1211 435.04 513.8789 435.04 C513.5332 435.04 l512.9463 435.04 512.2207 435.3516 512.2207 436.043 c512.2207 436.665 512.3926 437.4941 512.7041 438.3584 C514.7773 444.4756 l514.8467 444.6484 514.9502 444.752 515.123 444.752 C522.5537 444.752 l522.7266 444.752 522.7959 444.6826 522.8652 444.5439 C526.0791 436.043 l526.2861 435.4893 526.0791 435.1787 525.8711 435.1094 c525.7334 435.0752 525.6299 435.0059 525.6299 434.8672 c525.6299 434.6602 526.0098 434.6602 526.666 434.626 c529.0508 434.5566 531.5742 434.5566 532.0928 434.5566 c532.4727 434.5566 532.7832 434.626 532.7832 434.833 c532.7832 435.0059 532.6455 435.04 532.4375 435.04 c532.0928 435.04 531.5742 435.0752 531.0557 435.248 c530.3301 435.4551 529.3271 436.0078 528.083 439.084 c525.9756 444.3369 520.5488 458.6104 520.0313 459.9238 c519.6162 460.9951 519.4775 461.168 519.2705 461.168 c519.0635 461.168 518.9248 460.9609 518.5098 459.8203 c510.665 438.3584 Lf*UU/BBAccumRotation (0.000000) XTu*u0 D566.8926 439.0146 m567.0313 437.7705 567.2734 435.835 568.7588 435.3516 c569.7617 435.04 570.6602 435.04 571.0059 435.04 c571.1787 435.04 571.2822 435.0059 571.2822 434.8672 c571.2822 434.6602 570.9707 434.5566 570.5566 434.5566 c569.7959 434.5566 566.0635 434.6602 564.7842 434.7637 c563.9893 434.833 563.8174 434.9365 563.8174 435.1094 c563.8174 435.248 563.8857 435.3164 564.0586 435.3516 c564.2314 435.3857 564.2666 435.9736 564.1973 436.5957 c562.5381 454.4287 L562.4346 454.4287 L553.9678 436.457 L553.2412 434.9365 553.1377 434.626 552.8271 434.626 c552.585 434.626 552.4121 434.9717 551.7559 436.2158 c550.8564 437.9092 547.8848 443.8877 547.7119 444.2334 c547.4004 444.8555 543.5303 453.1494 543.1504 454.083 c543.0117 454.083 L541.6289 438.0469 L541.5947 437.4941 541.5947 436.8721 541.5947 436.2842 c541.5947 435.7656 541.9746 435.3164 542.4932 435.2129 c543.0811 435.0752 543.5996 435.04 543.8066 435.04 c543.9443 435.04 544.083 434.9717 544.083 434.8672 c544.083 434.626 543.876 434.5566 543.4609 434.5566 c542.1826 434.5566 540.5234 434.6602 540.2471 434.6602 c539.9355 434.6602 538.2773 434.5566 537.3438 434.5566 c536.998 434.5566 536.7559 434.626 536.7559 434.8672 c536.7559 434.9717 536.9287 435.04 537.1016 435.04 c537.3779 435.04 537.6201 435.04 538.1387 435.1436 c539.2793 435.3516 539.3828 436.6992 539.5215 438.0127 c542.0098 460.5459 L542.0781 460.9258 542.1826 461.168 542.3896 461.168 c542.5967 461.168 542.7354 461.0293 542.9082 460.6494 c553.4834 438.9111 L563.6445 460.6152 L563.7822 460.9258 563.9209 461.168 564.1621 461.168 c564.4043 461.168 564.5078 460.8916 564.5771 460.2344 C566.8926 439.0146 lf*U*u580.0938 450.6611 m580.0938 456.0527 580.0938 457.0205 580.0254 458.127 c579.9561 459.3018 579.6797 459.8545 578.5391 460.0967 c578.2627 460.166 577.6748 460.2002 577.3643 460.2002 c577.2256 460.2002 577.0869 460.2695 577.0869 460.4072 c577.0869 460.6152 577.2598 460.6836 577.6406 460.6836 c579.1953 460.6836 581.2695 460.5801 581.5459 460.5801 c582.3057 460.5801 584.3105 460.6836 585.9004 460.6836 c590.2207 460.6836 591.7754 459.2324 592.3281 458.7139 c593.0889 457.9883 594.0566 456.4336 594.0566 454.6016 c594.0566 449.6934 590.4619 446.376 585.5547 446.376 c585.3818 446.376 585.002 446.376 584.8291 446.4102 c584.6563 446.4102 584.4482 446.4795 584.4482 446.6523 c584.4482 446.9287 584.6563 446.9639 585.3818 446.9639 c588.7344 446.9639 591.3604 449.417 591.3604 452.5967 c591.3604 453.7373 591.2568 456.0527 589.4258 457.9189 c587.5938 459.7852 585.4854 459.6475 584.6904 459.6475 c584.1035 459.6475 583.5156 459.5781 583.2041 459.4395 c582.9971 459.3711 582.9277 459.1289 582.9277 458.7832 c582.9277 444.5791 L582.9277 441.2607 582.9277 438.5313 583.1006 437.0791 c583.2041 436.0771 583.4121 435.3164 584.4482 435.1787 c584.9326 435.1094 585.6934 435.04 586.0039 435.04 c586.2109 435.04 586.2803 434.9365 586.2803 434.833 c586.2803 434.6602 586.1074 434.5566 585.7275 434.5566 c583.8262 434.5566 581.6494 434.6602 581.4766 434.6602 c581.373 434.6602 579.1953 434.5566 578.1592 434.5566 c577.7783 434.5566 577.6055 434.626 577.6055 434.833 c577.6055 434.9365 577.6748 435.04 577.8818 435.04 c578.1934 435.04 578.6084 435.1094 578.9189 435.1787 c579.6104 435.3164 579.7832 436.0771 579.9209 437.0791 c580.0938 438.5313 580.0938 441.2607 580.0938 444.5791 C580.0938 450.6611 lf*UU/BBAccumRotation (0.000000) XTu*u602.9033 435.0059 m602.4199 435.248 602.3857 435.3857 602.3857 436.3193 c602.3857 438.0469 602.5234 439.4297 602.5576 439.9824 c602.5928 440.3623 602.6621 440.5352 602.835 440.5352 c603.042 440.5352 603.0762 440.4316 603.0762 440.1553 c603.0762 439.8438 603.0762 439.3604 603.1807 438.877 c603.6982 436.3193 605.9795 435.3516 608.2949 435.3516 c611.6133 435.3516 613.2373 437.7363 613.2373 439.9482 c613.2373 442.333 612.2354 443.7148 609.2627 446.1689 c607.708 447.4473 L604.0439 450.4541 603.2148 452.5967 603.2148 454.9473 c603.2148 458.6445 605.9795 461.168 610.3691 461.168 c611.7168 461.168 612.7188 461.0293 613.583 460.8223 c614.2393 460.6836 614.5156 460.6494 614.792 460.6494 c615.0693 460.6494 615.1377 460.5801 615.1377 460.4072 c615.1377 460.2344 615 459.0938 615 456.7441 c615 456.1914 614.9307 455.9492 614.7578 455.9492 c614.5508 455.9492 614.5156 456.1221 614.4814 456.3984 c614.4473 456.8135 614.2393 457.7461 614.0322 458.127 c613.8252 458.5068 612.8916 459.958 609.7119 459.958 c607.3271 459.958 605.4609 458.4717 605.4609 455.9492 c605.4609 453.9795 606.4287 452.8047 609.6777 450.1436 c610.6455 449.3828 L614.7236 446.1689 615.6914 444.0264 615.6914 441.2607 c615.6914 439.8438 615.1377 437.2178 612.7529 435.5244 c611.2676 434.4873 609.4014 434.0723 607.5352 434.0723 c605.9102 434.0723 604.3203 434.3145 602.9033 435.0059 cf*U*u648.3154 444.5791 m648.3154 441.2607 648.3154 438.5313 648.4883 437.0791 c648.5918 436.0771 648.7988 435.3164 649.8359 435.1787 c650.3203 435.1094 651.0801 435.04 651.3916 435.04 c651.5986 435.04 651.668 434.9365 651.668 434.833 c651.668 434.6602 651.4951 434.5566 651.1143 434.5566 c649.2139 434.5566 647.0361 434.6602 646.8633 434.6602 c646.6904 434.6602 644.5137 434.5566 643.4766 434.5566 c643.0967 434.5566 642.9238 434.626 642.9238 434.833 c642.9238 434.9365 642.9932 435.04 643.2002 435.04 c643.5117 435.04 643.9268 435.1094 644.2373 435.1787 c644.9287 435.3164 645.1016 436.0771 645.2393 437.0791 c645.4121 438.5313 645.4121 441.2607 645.4121 444.5791 c645.4121 448.208 L645.4121 448.3457 645.3086 448.415 645.2051 448.415 c630.5518 448.415 L630.4482 448.415 630.3438 448.3809 630.3438 448.208 c630.3438 444.5791 L630.3438 441.2607 630.3438 438.5313 630.5166 437.0791 c630.6201 436.0771 630.8281 435.3164 631.8643 435.1787 c632.3486 435.1094 633.1094 435.04 633.4199 435.04 c633.627 435.04 633.6963 434.9365 633.6963 434.833 c633.6963 434.6602 633.5234 434.5566 633.1436 434.5566 c631.2422 434.5566 629.0654 434.6602 628.8926 434.6602 c628.7197 434.6602 626.542 434.5566 625.5059 434.5566 c625.126 434.5566 624.9531 434.626 624.9531 434.833 c624.9531 434.9365 625.0215 435.04 625.2295 435.04 c625.54 435.04 625.9551 435.1094 626.2656 435.1787 c626.957 435.3164 627.1299 436.0771 627.2686 437.0791 c627.4414 438.5313 627.4414 441.2607 627.4414 444.5791 c627.4414 450.6611 L627.4414 456.0527 627.4414 457.0205 627.3721 458.127 c627.3027 459.3018 627.0264 459.8545 625.8857 460.0967 c625.6094 460.166 625.0215 460.2002 624.7109 460.2002 c624.5723 460.2002 624.4346 460.2695 624.4346 460.4072 c624.4346 460.6152 624.6074 460.6836 624.9873 460.6836 c626.542 460.6836 628.7197 460.5801 628.8926 460.5801 c629.0654 460.5801 631.2422 460.6836 632.2793 460.6836 c632.6592 460.6836 632.832 460.6152 632.832 460.4072 c632.832 460.2695 632.6943 460.2002 632.5557 460.2002 c632.3145 460.2002 632.1064 460.166 631.6924 460.0967 c630.7588 459.9238 630.4824 459.3359 630.4131 458.127 c630.3438 457.0205 630.3438 456.0527 630.3438 450.6611 c630.3438 449.9355 L630.3438 449.7627 630.4482 449.7285 630.5518 449.7285 c645.2051 449.7285 L645.3086 449.7285 645.4121 449.7627 645.4121 449.9355 c645.4121 450.6611 L645.4121 456.0527 645.4121 457.0205 645.3428 458.127 c645.2744 459.3018 644.998 459.8545 643.8574 460.0967 c643.5811 460.166 642.9932 460.2002 642.6816 460.2002 c642.5439 460.2002 642.4053 460.2695 642.4053 460.4072 c642.4053 460.6152 642.5781 460.6836 642.958 460.6836 c644.5137 460.6836 646.6904 460.5801 646.8633 460.5801 c647.0361 460.5801 649.2139 460.6836 650.251 460.6836 c650.6309 460.6836 650.8037 460.6152 650.8037 460.4072 c650.8037 460.2695 650.665 460.2002 650.5273 460.2002 c650.2852 460.2002 650.0781 460.166 649.6631 460.0967 c648.7305 459.9238 648.4541 459.3359 648.3848 458.127 c648.3154 457.0205 648.3154 456.0527 648.3154 450.6611 C648.3154 444.5791 lf*U*u666.1475 444.5791 m666.1475 441.2607 666.1475 438.5313 666.3203 437.0791 c666.4248 436.0771 666.6318 435.3164 667.6689 435.1787 c668.1523 435.1094 668.9131 435.04 669.2236 435.04 c669.4316 435.04 669.5 434.9365 669.5 434.833 c669.5 434.6602 669.3271 434.5566 668.9473 434.5566 c667.0469 434.5566 664.8691 434.6602 664.6963 434.6602 c664.5234 434.6602 662.3467 434.5566 661.3096 434.5566 c660.9297 434.5566 660.7568 434.626 660.7568 434.833 c660.7568 434.9365 660.8252 435.04 661.0332 435.04 c661.3438 435.04 661.7588 435.1094 662.0703 435.1787 c662.7607 435.3164 662.9336 436.0771 663.0723 437.0791 c663.2451 438.5313 663.2451 441.2607 663.2451 444.5791 c663.2451 450.6611 L663.2451 456.0527 663.2451 457.0205 663.1758 458.127 c663.1064 459.3018 662.7607 459.8887 662.001 460.0615 c661.6201 460.166 661.1709 460.2002 660.9297 460.2002 c660.791 460.2002 660.6533 460.2695 660.6533 460.4072 c660.6533 460.6152 660.8252 460.6836 661.2061 460.6836 c662.3467 460.6836 664.5234 460.5801 664.6963 460.5801 c664.8691 460.5801 667.0469 460.6836 668.083 460.6836 c668.4639 460.6836 668.6367 460.6152 668.6367 460.4072 c668.6367 460.2695 668.498 460.2002 668.3594 460.2002 c668.1182 460.2002 667.9102 460.166 667.4961 460.0967 c666.5625 459.9238 666.2861 459.3359 666.2168 458.127 c666.1475 457.0205 666.1475 456.0527 666.1475 450.6611 C666.1475 444.5791 lf*U*u683.8418 458.9561 m683.8418 459.1631 683.9463 459.3018 684.1191 459.3711 c684.4639 459.4746 685.3975 459.5781 686.4346 459.5781 c690.1318 459.5781 692.4131 456.9863 692.4131 452.666 c692.4131 450.0391 691.5146 448.1729 690.3047 447.3438 c689.5098 446.791 688.542 446.6875 687.7129 446.6875 c686.1924 446.6875 684.6025 446.9287 684.084 447.2402 c683.9111 447.3438 683.8418 447.4824 683.8418 447.6553 c683.8418 458.9561 Lf1 D681.0771 444.5791 m681.0771 441.2607 681.0771 438.5313 680.9043 437.0791 c680.7666 436.0771 680.5938 435.3164 679.9023 435.1787 c679.5918 435.1094 679.1768 435.04 678.8652 435.04 c678.6582 435.04 678.5889 434.9365 678.5889 434.833 c678.5889 434.626 678.7617 434.5566 679.1416 434.5566 c680.1787 434.5566 682.3564 434.6602 682.3906 434.6602 c682.5635 434.6602 684.7412 434.5566 686.6416 434.5566 c687.0215 434.5566 687.1943 434.6602 687.1943 434.833 c687.1943 434.9365 687.125 435.04 686.918 435.04 c686.6074 435.04 685.8467 435.1094 685.3633 435.1787 c684.3262 435.3164 684.1191 436.0771 684.0146 437.0791 c683.8418 438.5313 683.8418 441.2607 683.8418 444.5791 C683.8418 445.4082 l683.8418 445.5811 683.9111 445.6846 684.084 445.6846 C688.335 445.6162 l688.542 445.6162 688.6465 445.5469 688.7842 445.4082 c689.4756 444.5098 691.0996 442.1943 692.5518 440.2939 c694.5215 437.7012 695.7314 436.0078 697.2168 435.2129 c698.1152 434.7295 698.9795 434.5566 700.915 434.5566 C703.3691 434.5566 l703.9912 434.5566 704.1982 434.626 704.1982 434.833 c704.1982 434.9365 704.0596 435.04 703.8867 435.04 c703.6797 435.04 703.1963 435.04 702.5391 435.1436 c701.6748 435.2822 700.1895 435.6621 698.3232 437.6328 c696.3184 439.7754 693.9688 442.8506 691.1348 446.4795 c694.2451 449.3486 695.3164 451.9053 695.3164 454.4629 c695.3164 456.8477 693.7959 458.541 692.9316 459.1631 c691.0996 460.4766 688.7842 460.6836 686.6074 460.6836 c685.5352 460.6836 682.9092 460.5801 682.5293 460.5801 c682.3564 460.5801 680.1787 460.6836 678.624 460.6836 c678.2432 460.6836 678.0703 460.6152 678.0703 460.4072 c678.0703 460.2695 678.209 460.2002 678.3467 460.2002 c678.6582 460.2002 679.2461 460.166 679.5225 460.0967 c680.6631 459.8545 680.9395 459.3018 681.0088 458.127 c681.0771 457.0205 681.0771 456.0527 681.0771 450.6611 c681.0771 444.5791 Lf*U*u0 D709.7617 450.6611 m709.7617 456.0527 709.7617 457.0205 709.6934 458.127 c709.624 459.3018 709.3477 459.8545 708.207 460.0967 c707.9307 460.166 707.3428 460.2002 707.0322 460.2002 c706.8936 460.2002 706.7559 460.2695 706.7559 460.4072 c706.7559 460.6152 706.9287 460.6836 707.3086 460.6836 c708.8633 460.6836 711.041 460.5801 711.2139 460.5801 c711.4561 460.5801 718.333 460.5801 719.1279 460.6152 c719.7842 460.6494 720.3379 460.7188 720.6143 460.7881 c720.7871 460.8223 720.9248 460.9609 721.0977 460.9609 c721.2012 460.9609 721.2363 460.8223 721.2363 460.6494 c721.2363 460.4072 721.0635 459.9932 720.96 459.0254 c720.9248 458.6797 720.8564 457.1592 720.7871 456.7441 c720.752 456.5713 720.6836 456.3643 720.5449 456.3643 c720.3379 456.3643 720.2686 456.5371 720.2686 456.8135 c720.2686 457.0547 720.2334 457.6426 720.0615 458.0576 c719.8193 458.6104 719.4736 459.0254 717.6074 459.2324 c717.0195 459.3018 713.2529 459.3359 712.8721 459.3359 c712.7344 459.3359 712.665 459.2324 712.665 458.9902 c712.665 449.4521 L712.665 449.21 712.7002 449.1064 712.8721 449.1064 c713.3223 449.1064 717.5732 449.1064 718.3672 449.1758 c719.1973 449.2441 719.6807 449.3135 719.9922 449.6592 c720.2334 449.9355 720.3721 450.1084 720.5107 450.1084 c720.6143 450.1084 720.6836 450.0391 720.6836 449.832 c720.6836 449.625 720.5107 449.0371 720.4063 447.8965 c720.3379 447.2051 720.2686 445.9268 720.2686 445.6846 c720.2686 445.4082 720.2686 445.0283 720.0264 445.0283 c719.8535 445.0283 719.7842 445.166 719.7842 445.3389 c719.7842 445.6846 719.7842 446.0303 719.6465 446.4795 c719.5078 446.9639 719.1973 447.5508 717.8496 447.6895 c716.916 447.793 713.4951 447.8623 712.9072 447.8623 c712.7344 447.8623 712.665 447.7588 712.665 447.6201 c712.665 444.5791 L712.665 443.4043 712.6309 439.3945 712.665 438.6689 c712.7686 436.2842 713.2871 435.835 716.6738 435.835 c717.5732 435.835 719.0938 435.835 719.9922 436.2158 c720.8906 436.5957 721.3057 437.2871 721.5469 438.7041 c721.6162 439.084 721.6855 439.2217 721.8584 439.2217 c722.0654 439.2217 722.0654 438.9453 722.0654 438.7041 c722.0654 438.4277 721.7891 436.0771 721.6162 435.3516 c721.374 434.4531 721.0977 434.4531 719.75 434.4531 c714.5313 434.4531 712.2158 434.6602 711.2139 434.6602 c711.041 434.6602 708.8633 434.5566 707.8271 434.5566 c707.4463 434.5566 707.2734 434.626 707.2734 434.833 c707.2734 434.9365 707.3428 435.04 707.5498 435.04 c707.8613 435.04 708.2764 435.1094 708.5869 435.1787 c709.2783 435.3164 709.4512 436.0771 709.5889 437.0791 c709.7617 438.5313 709.7617 441.2607 709.7617 444.5791 C709.7617 450.6611 lf*UU/BBAccumRotation (0.000000) XTLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF